<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xmlns:security="http://www.springframework.org/schema/security"
 		xmlns:p="http://www.springframework.org/schema/p"
 		xsi:schemaLocation="http://www.springframework.org/schema/beans 
      	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   		http://www.springframework.org/schema/security 
   		http://www.springframework.org/schema/security/spring-security-3.0.xsd">
  
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="false" use-expressions="true" access-denied-page="/denied" 
		entry-point-ref="authenticationEntryPoint" >
	  
		<security:intercept-url pattern="${pageContext.request.contextPath}/loginPage" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="${pageContext.request.contextPath}/css/**" filters="none"/>
		<security:intercept-url pattern="${pageContext.request.contextPath}/javascript/**" filters="none"/>
		<security:intercept-url pattern="${pageContext.request.contextPath}/images/**" filters="none"/>
		
		<security:logout
	    	invalidate-session="true"
	    	logout-success-url="/logout"
	    	logout-url="/j_spring_security_logout" />
	    
	  	<security:custom-filter ref="blacklistFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	  	<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
	  	
	  	<!-- Session Timeout -->
		<security:session-management invalid-session-url="/loginPage?session=false">
	    	<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</security:session-management>
	
	</security:http>
  		
	<!--  Custom filter to deny unwanted users even though registered -->
	<bean id="blacklistFilter" class="com.jawsmith.springsecurity.BlacklistFilter" />
	 	
	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
		p:authenticationManager-ref="customAuthenticationManager"
	    p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
	    p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />
	     
	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same -->
	<bean id="customAuthenticationManager" class="com.jawsmith.springsecurity.CustomAuthenticationManager" />
	   
	<!-- We just actually need to set the default failure url here -->
	<bean id="customAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
		p:defaultFailureUrl="/loginPage?error=true" />
	    
	<!-- We just actually need to set the default target url here -->
	<bean id="customAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
		p:defaultTargetUrl="/loginSuccess" />
	   
	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
	whenever the server sends back a response requiring authentication -->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	   	p:loginFormUrl="/loginPage" />
	 
	 <!-- The tag below has no use but Spring Security needs it to autowire the parent property of 
	org.springframework.security.authentication.ProviderManager. Otherwise we get an error 
	A probable bug. This is still under investigation-->
	<security:authentication-manager/>
</beans>